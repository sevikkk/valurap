from valurap.path_planning import PathPlanner, PathLimits, solve_model_simple, ir, xtov_k

DEFAULT_LIMITS = PathLimits(None, None, 3000, 3000, None, None, 0.1)


def test_simple():
    pp = PathPlanner([[0, 0, 0], [100, 0, 100], [100, 0, 0]], DEFAULT_LIMITS)

    plan, errors, notesi, extras_plan = pp.plan_path_in_floats()
    assert not errors

    assert plan == [
        [0.03333333333333333, 1.6666666666666667, 0.0, 100.0, 0.0, "accel_0"],
        [0.9666666666666666, 98.33333333333333, 0.0, 100.0, 0.0, "plato_0"],
        [0.03333333333333333, 100.0, 0.0, 0.0, 0.0, "accel_1"],
        [0.005, 100.0, 0.0, 0.0, 0.0, "final"],
    ]


def test_corner_too_fast_for_precision():
    pp = PathPlanner([[0, 0, 0], [100, 0, 100], [100, 100, 100], [100, 100, 0]], DEFAULT_LIMITS)

    plan, errors, notes, extras_plan = pp.plan_path_in_floats()
    assert len(errors) == 1
    assert errors[0][1] == "middle_delta"


def test_corner_ok():
    pp = PathPlanner([[0, 0, 0], [100, 0, 40], [100, 100, 40], [100, 100, 0]], DEFAULT_LIMITS)

    plan, errors, notes, extras_plan = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_2"],
        [0.005, 100.0, 100.0, 0.0, 0.0, "final"],
    ]


def test_corner_with_useless_segment():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 50, 40], [100, 100, 40], [100, 100, 0]], DEFAULT_LIMITS
    )

    plan, errors, notes, extras_plan = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [1.2433333333333334, 100.0, 50.0, 0.0, 40.0, "plato_1"],
        [0.0, 100.0, 50.0, 0.0, 40.0, "accel_2"],  # expected, no auto join
        [1.2433333333333334, 100.0, 99.73333333333333, 0.0, 40.0, "plato_2"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_3"],
        [0.005, 100.0, 100.0, 0.0, 0.0, "final"],
    ]


def test_zigzag():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 100, 40], [200, 100, 40], [200, 100, 0]], DEFAULT_LIMITS
    )

    plan, errors, notes, extras_plan = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.26666666666667, 100.0, 40.0, 0.0, "accel_2"],
        [2.486666666666667, 199.73333333333335, 100.0, 40.0, 0.0, "plato_2"],
        [0.013333333333333334, 200.00000000000003, 100.0, 0.0, 0.0, "accel_3"],
        [0.005, 200.00000000000003, 100.0, 0.0, 0.0, "final"],
    ]


SLOW_LIMITS = PathLimits(None, None, 300, 300, None, None, 0.1)


def test_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, errors, notesi, extras_plan = pp.plan_path_in_floats()
    assert errors
    assert errors[0][1] == "cur_avail"


def test_slowdown_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    assert list(slowdowns) == [
        0.31016931544410925,
        0.31016931544410925,
        0.31016931544410925,
        0.31016931544410925,
    ]
    print(notes)


def test_optimize_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    assert list(slowdowns) == [
        0.31016931544410925,
        0.31016931544410925,
        0.31016931544410925,
        0.31016931544410925,
    ]
    speedup_slowdowns = pp.plan_speedup(slowdowns, notes)
    plan, errors, notes, extras_plan = pp.plan_path_in_floats(speedup_slowdowns)
    assert not errors
    assert plan == [
        [0.041355908725881234, 0.2565466779815129, 0.0, 12.40677261776437, 0.0, "accel_0"],
        [0.013333333333333435, 0.4219703128850391, 0.0, 12.40677261776437, 0.0, "plato_0"],
        [0.0919774246074521, 2.832090301570193, 0.0, 40.0, 0.0, "accel_0_1"],
        [2.35839548492149, 97.16790969842978, 0.0, 40.0, 0.0, "plato_0_1"],
        [0.0919774246074521, 99.57802968711495, 0.0, 12.40677261776437, 0.0, "accel_0_2"],
        [0.013333333333334406, 99.74345332201848, 0.0, 12.40677261776437, 0.0, "plato_0_2"],
        [0.041355908725881234, 100.0, 0.2565466779815129, 0.0, 12.40677261776437, "accel_1"],
        [0.20044750723295685, 100.0, 2.743453322018487, 0.0, 12.40677261776437, "plato_1"],
        [0.041355908725881234, 100.25654667798152, 3.0, 12.40677261776437, 0.0, "accel_2"],
        [0.013333333333334509, 100.42197031288505, 3.0, 12.40677261776437, 0.0, "plato_2"],
        [0.0919774246074521, 102.83209030157022, 3.0, 40.0, 0.0, "accel_2_1"],
        [2.35839548492149, 197.1679096984298, 3.0, 40.0, 0.0, "plato_2_1"],
        [0.0919774246074521, 199.57802968711496, 3.0, 12.40677261776437, 0.0, "accel_2_2"],
        [0.01333333333333326, 199.7434533220185, 3.0, 12.40677261776437, 0.0, "plato_2_2"],
        [0.041355908725881234, 200.0, 3.0, 0.0, 0.0, "accel_3"],
        [0.005, 200.0, 3.0, 0.0, 0.0, "final"],
    ]


def test_solve_model_1():
    plan = [
        [0.023333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_2"],
        [0.005, 100.0, 100.0, 0.0, 0.0, "final"],
    ]
    acc_t, acc_x, acc_y, acc_vx, ac_vy, _ = plan[0]
    plato_t, plato_x, plato_y, _, _, _ = plan[1]
    res = solve_model_simple(
        0, acc_vx / 1000 * 80 * xtov_k, plato_x * 80, ir(acc_t * 1000), ir(plato_t * 1000)
    )

    assert res == {
        "accel_a": 0,
        "accel_j": 195450425,
        "accel_jj": -17765891,
        "accel_middle_x": 6.076024564372061,
        "accel_t": 23,
        "accel_x": 33.54218909201734,
        "e_delta_v": -458.5278241269989,
        "e_jerk": -18.556732177734375,
        "e_target": 6.426034815376624e-08,
        "plato_t": 2487,
        "plato_v": 274419.37911987305,
        "plato_x": 7945.12447751039,
        "target_v": 274877.90694400005,
    }


def test_solve_model_2():
    plan = [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_2"],
        [0.005, 100.0, 100.0, 0.0, 0.0, "final"],
    ]
    acc_t, acc_x, acc_y, acc_vx, ac_vy, _ = plan[0]
    plato_t, plato_x, plato_y, _, _, _ = plan[1]
    res = solve_model_simple(
        0, acc_vx / 1000 * 80 * xtov_k, plato_x * 80, ir(acc_t * 1000), ir(plato_t * 1000)
    )

    assert res == {
        "accel_a": 1385722962,
        "accel_j": 0,
        "accel_jj": 0,
        "accel_middle_x": 9.599999998144426,
        "accel_t": 13,
        "accel_x": 19.199999996288852,
        "e_delta_v": -7.354537956416607e-06,
        "e_jerk": 4.57763671875e-05,
        "e_target": 1.066666883310063,
        "plato_t": 2487,
        "plato_v": 274877.9069366455,
        "plato_x": 7958.399999787069,
        "target_v": 274877.90694400005,
    }


def test_solve_model_3():
    acc_vx = 100.0
    plato_x = 100.0
    plato_t = 1.0
    res = solve_model_simple(0, acc_vx / 1000 * 80 * xtov_k, plato_x * 80, 0, ir(plato_t * 1000))

    assert res == {
        "accel_a": 0,
        "accel_j": 0,
        "accel_jj": 0,
        "accel_middle_x": 0.0,
        "accel_t": 0,
        "accel_x": 0.0,
        "e_delta_v": 4.501896910369396e-06,
        "e_jerk": 687194.767364502,
        "e_target": -5.240872269496322e-08,
        "plato_t": 1000,
        "plato_v": 687194.767364502,
        "plato_x": 8000.000000052409,
        "target_v": 687194.76736,
    }


def test_intplan_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    int_plan = pp.plan()
    for px, py in int_plan:
        # print()
        # print(px)
        # print(py)

        if "e_target" in px:
            assert abs(px["e_target"]) < 2
            assert abs(px["e_jerk"]) < 500
            assert abs(px["e_delta_v"]) < 1000

        if "e_target" in py:
            assert abs(py["e_target"]) < 2
            assert abs(py["e_jerk"]) < 500
            assert abs(py["e_delta_v"]) < 1000


def test_corner_with_extras():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 100, 40], [100, 100, 0]],
        DEFAULT_LIMITS,
        extras=[["E1", 837, [0, 100, 200, 200]], ["E2", 837, [0, 50, 100, 100]]],
    )

    plan, errors, notes, extras_plan = pp.plan_path_in_floats(with_extras=True)
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_2"],
        [0.005, 100.0, 100.0, 0.0, 0.0, "final"],
    ]
    assert extras_plan == [
        [
            "E1",
            [
                (0.013333333333333334, 0.2666666666666668, 40.0),
                (2.486666666666667, 99.73333333333333, 40.0),
                (0.013333333333333334, 100.26666666666667, 40.0),
                (2.486666666666667, 199.73333333333332, 40.0),
                (0.013333333333333334, 200.0, 0.0),
                (0.005, 200.0, 0.0),
            ],
        ],
        [
            "E2",
            [
                (0.013333333333333334, 0.1333333333333334, 20.0),
                (2.486666666666667, 49.86666666666667, 20.0),
                (0.013333333333333334, 50.13333333333333, 20.0),
                (2.486666666666667, 99.86666666666666, 20.0),
                (0.013333333333333334, 100.0, 0.0),
                (0.005, 100.0, 0.0),
            ],
        ],
    ]


def test_optimize_zigzag_small_with_extras():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]],
        SLOW_LIMITS,
        extras=[["E", 837, [0, 100, 103, 203, 203]]],
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    speedup_slowdowns = pp.plan_speedup(slowdowns, notes)
    plan, errors, notes, extras_plan = pp.plan_path_in_floats(speedup_slowdowns, with_extras=True)
    assert not errors
    assert plan == [
        [0.041355908725881234, 0.2565466779815129, 0.0, 12.40677261776437, 0.0, "accel_0"],
        [0.013333333333333435, 0.4219703128850391, 0.0, 12.40677261776437, 0.0, "plato_0"],
        [0.0919774246074521, 2.832090301570193, 0.0, 40.0, 0.0, "accel_0_1"],
        [2.35839548492149, 97.16790969842978, 0.0, 40.0, 0.0, "plato_0_1"],
        [0.0919774246074521, 99.57802968711495, 0.0, 12.40677261776437, 0.0, "accel_0_2"],
        [0.013333333333334406, 99.74345332201848, 0.0, 12.40677261776437, 0.0, "plato_0_2"],
        [0.041355908725881234, 100.0, 0.2565466779815129, 0.0, 12.40677261776437, "accel_1"],
        [0.20044750723295685, 100.0, 2.743453322018487, 0.0, 12.40677261776437, "plato_1"],
        [0.041355908725881234, 100.25654667798152, 3.0, 12.40677261776437, 0.0, "accel_2"],
        [0.013333333333334509, 100.42197031288505, 3.0, 12.40677261776437, 0.0, "plato_2"],
        [0.0919774246074521, 102.83209030157022, 3.0, 40.0, 0.0, "accel_2_1"],
        [2.35839548492149, 197.1679096984298, 3.0, 40.0, 0.0, "plato_2_1"],
        [0.0919774246074521, 199.57802968711496, 3.0, 12.40677261776437, 0.0, "accel_2_2"],
        [0.01333333333333326, 199.7434533220185, 3.0, 12.40677261776437, 0.0, "plato_2_2"],
        [0.041355908725881234, 200.0, 3.0, 0.0, 0.0, "accel_3"],
        [0.005, 200.0, 3.0, 0.0, 0.0, "final"],
    ]
    assert extras_plan == [
        [
            "E",
            [
                (0.041355908725881234, 0.2565466779815129, 12.40677261776437),
                (0.013333333333333435, 0.42197031288503917, 12.40677261776437),
                (0.0919774246074521, 2.832090301570193, 39.99999999999999),
                (2.35839548492149, 97.16790969842978, 39.99999999999999),
                (0.0919774246074521, 99.57802968711495, 12.406772617764442),
                (0.013333333333334406, 99.74345332201848, 12.406772617764442),
                (0.041355908725881234, 100.25654667798152, 12.406772617764371),
                (0.20044750723295685, 102.74345332201848, 12.406772617764371),
                (0.041355908725881234, 103.25654667798152, 12.406772617764442),
                (0.013333333333334509, 103.42197031288505, 12.406772617764442),
                (0.0919774246074521, 105.83209030157022, 39.99999999999999),
                (2.35839548492149, 200.1679096984298, 39.99999999999999),
                (0.0919774246074521, 202.57802968711496, 12.406772617764513),
                (0.01333333333333326, 202.7434533220185, 12.406772617764513),
                (0.041355908725881234, 203.0, 0.0),
                (0.005, 203.0, 0.0),
            ],
        ]
    ]


def test_optimize_zigzag_small_int_with_extras():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]],
        SLOW_LIMITS,
        extras=[["E", 837, [0, 100, 103, 203, 203]]],
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    speedup_slowdowns = pp.plan_speedup(slowdowns, notes)
    plan, errors, notes, extras_plan = pp.plan_path_in_floats(speedup_slowdowns, with_extras=True)
    int_plan = pp.plan_to_int(plan, extras_plan)
    for p in int_plan:
        print("-----------")
        for pp in p:
            print(pp)


def test_optimize_simple_int_with_extras():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 0, 0]], SLOW_LIMITS, extras=[["E", 837, [0, 100, 100]]]
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    speedup_slowdowns = pp.plan_speedup(slowdowns, notes)
    plan, errors, notes, extras_plan = pp.plan_path_in_floats(speedup_slowdowns, with_extras=True)
    int_plan = pp.plan_to_int(plan, extras_plan)
    for p in int_plan:
        print("-----------")
        for pp in p:
            print(pp)
