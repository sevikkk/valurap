from valurap.path_planning import PathPlanner, PathLimits

DEFAULT_LIMITS = PathLimits(None, None, 3000, 3000, None, None, 0.1)


def test_simple():
    pp = PathPlanner([[0, 0, 0], [100, 0, 100], [100, 0, 0]], DEFAULT_LIMITS)

    plan, errors, notes = pp.plan_path_in_floats()
    assert not errors

    assert plan == [
        [0.03333333333333333, 1.6666666666666667, 0.0, 100.0, 0.0, "accel_0"],
        [0.9666666666666666, 98.33333333333333, 0.0, 100.0, 0.0, "plato_0"],
        [0.03333333333333333, 100.0, 0.0, 0.0, 0.0, "accel_1"],
        [5, 100.0, 0.0, 0.0, 0.0, "final"],
    ]


def test_corner_too_fast_for_precision():
    pp = PathPlanner([[0, 0, 0], [100, 0, 100], [100, 100, 100], [100, 100, 0]], DEFAULT_LIMITS)

    plan, errors, notes = pp.plan_path_in_floats()
    assert len(errors) == 1
    assert errors[0][1] == "middle_delta"


def test_corner_ok():
    pp = PathPlanner([[0, 0, 0], [100, 0, 40], [100, 100, 40], [100, 100, 0]], DEFAULT_LIMITS)

    plan, errors, notes = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_2"],
        [5, 100.0, 100.0, 0.0, 0.0, "final"],
    ]


def test_corner_with_useless_segment():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 50, 40], [100, 100, 40], [100, 100, 0]], DEFAULT_LIMITS
    )

    plan, errors, notes = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [1.2433333333333334, 100.0, 50.0, 0.0, 40.0, "plato_1"],
        [0.0, 100.0, 50.0, 0.0, 40.0, "accel_2"],  # expected, no auto join
        [1.2433333333333334, 100.0, 99.73333333333333, 0.0, 40.0, "plato_2"],
        [0.013333333333333334, 100.0, 100.0, 0.0, 0.0, "accel_3"],
        [5, 100.0, 100.0, 0.0, 0.0, "final"],
    ]


def test_zigzag():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 100, 40], [200, 100, 40], [200, 100, 0]], DEFAULT_LIMITS
    )

    plan, errors, notes = pp.plan_path_in_floats()
    assert not errors
    assert plan == [
        [0.013333333333333334, 0.2666666666666668, 0.0, 40.0, 0.0, "accel_0"],
        [2.486666666666667, 99.73333333333333, 0.0, 40.0, 0.0, "plato_0"],
        [0.013333333333333334, 100.0, 0.2666666666666668, 0.0, 40.0, "accel_1"],
        [2.486666666666667, 100.0, 99.73333333333333, 0.0, 40.0, "plato_1"],
        [0.013333333333333334, 100.26666666666667, 100.0, 40.0, 0.0, "accel_2"],
        [2.486666666666667, 199.73333333333335, 100.0, 40.0, 0.0, "plato_2"],
        [0.013333333333333334, 200.00000000000003, 100.0, 0.0, 0.0, "accel_3"],
        [5, 200.00000000000003, 100.0, 0.0, 0.0, "final"],
    ]


SLOW_LIMITS = PathLimits(None, None, 300, 300, None, None, 0.1)


def test_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, errors, notes = pp.plan_path_in_floats()
    assert errors
    assert errors[0][1] == "out_avail_exit"


def test_slowdown_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    assert list(slowdowns) == [
        0.31016931544411014,
        0.31016931544411014,
        0.31016931544411014,
        0.31016931544411014,
    ]
    print(notes)


def test_optimize_zigzag_small():
    pp = PathPlanner(
        [[0, 0, 0], [100, 0, 40], [100, 3, 40], [200, 3, 40], [200, 3, 0]], SLOW_LIMITS
    )

    plan, slowdowns, notes = pp.plan_with_slow_down()
    assert list(slowdowns) == [
        0.31016931544411014,
        0.31016931544411014,
        0.31016931544411014,
        0.31016931544411014,
    ]
    print(notes)
    speedup_slowdowns = pp.plan_speedup(slowdowns, notes)
    plan, errors, notes = pp.plan_path_in_floats(speedup_slowdowns)
    assert not errors
    assert plan == [
        [0.04135590872588135, 0.25654667798151437, 0.0, 12.406772617764405, 0.0, "accel_0"],
        [0.03333333333333317, 0.670105765240326, 0.0, 12.406772617764405, 0.0, "plato_0"],
        [0.091977424607452, 3.080225753925479, 0.0, 40.0, 0.0, "accel_0_1"],
        [2.345988712303726, 96.91977424607451, 0.0, 40.0, 0.0, "plato_0_1"],
        [0.091977424607452, 99.32989423475966, 0.0, 12.406772617764405, 0.0, "accel_0_2"],
        [0.03333333333333402, 99.74345332201848, 0.0, 12.406772617764405, 0.0, "plato_0_2"],
        [0.04135590872588135, 100.0, 0.25654667798151437, 0.0, 12.406772617764405, "accel_1"],
        [0.20044750723295604, 100.0, 2.743453322018486, 0.0, 12.406772617764405, "plato_1"],
        [0.04135590872588135, 100.25654667798152, 3.0, 12.406772617764405, 0.0, "accel_2"],
        [0.03333333333333416, 100.67010576524034, 3.0, 12.406772617764405, 0.0, "plato_2"],
        [0.091977424607452, 103.08022575392549, 3.0, 40.0, 0.0, "accel_2_1"],
        [2.345988712303727, 196.91977424607455, 3.0, 40.0, 0.0, "plato_2_1"],
        [0.091977424607452, 199.3298942347597, 3.0, 12.406772617764405, 0.0, "accel_2_2"],
        [0.033333333333330585, 199.7434533220185, 3.0, 12.406772617764405, 0.0, "plato_2_2"],
        [0.04135590872588135, 200.0, 3.0, 0.0, 0.0, "accel_3"],
        [5, 200.0, 3.0, 0.0, 0.0, "final"],
    ]
