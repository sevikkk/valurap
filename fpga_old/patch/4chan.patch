diff --git a/fpga/src/acc_profile_gen.v b/fpga/src/acc_profile_gen.v
index b24b61b..32e7a79 100644
--- a/fpga/src/acc_profile_gen.v
+++ b/fpga/src/acc_profile_gen.v
@@ -165,8 +165,8 @@ always @(reset, acc_step, load,
 
 reg next_dir;
 reg next_step;
-reg signed [63:0] next_x;
-wire signed [63:0] x_acc;
+reg signed [47:0] next_x;
+wire signed [47:0] x_acc;
 wire signed [32:0] v_effective;
 
 assign v_effective = v + step_start_v;
diff --git a/fpga/src/mojo_top.v b/fpga/src/mojo_top.v
index be8e8c5..bc353a0 100644
--- a/fpga/src/mojo_top.v
+++ b/fpga/src/mojo_top.v
@@ -33,7 +33,15 @@ module mojo_top #(
 
     output mot_y_step,
     output mot_y_dir,
-    output mot_y_enable
+    output mot_y_enable,
+
+    output mot_z_step,
+    output mot_z_dir,
+    output mot_z_enable,
+
+    output mot_a_step,
+    output mot_a_dir,
+    output mot_a_enable
     );
 
 wire rst = ~rst_n; // make reset active high
@@ -180,6 +188,26 @@ wire [31:0] out_reg26;
 wire [31:0] out_reg27;
 wire [31:0] out_reg28;
 wire [31:0] out_reg29;
+wire [31:0] out_reg30;
+wire [31:0] out_reg31;
+wire [31:0] out_reg32;
+wire [31:0] out_reg33;
+wire [31:0] out_reg34;
+wire [31:0] out_reg35;
+wire [31:0] out_reg36;
+wire [31:0] out_reg37;
+wire [31:0] out_reg38;
+wire [31:0] out_reg39;
+wire [31:0] out_reg40;
+wire [31:0] out_reg41;
+wire [31:0] out_reg42;
+wire [31:0] out_reg43;
+wire [31:0] out_reg44;
+wire [31:0] out_reg45;
+wire [31:0] out_reg46;
+wire [31:0] out_reg47;
+wire [31:0] out_reg48;
+wire [31:0] out_reg49;
 
 wire [31:0] stbs;
 
@@ -236,7 +264,10 @@ assign msg_all_pulse_n = out_reg5;
 assign msg_all_post_n = out_reg6;
 assign mot_x_enable = ~out_reg7[0];
 assign mot_y_enable = ~out_reg7[1];
+assign mot_z_enable = ~out_reg7[2];
+assign mot_a_enable = ~out_reg7[3];
 
+// X channel
 wire apg_x_set_x;
 wire apg_x_set_v;
 wire apg_x_set_a;
@@ -272,6 +303,7 @@ wire apg_x_step;
 wire apg_x_dir;
 wire apg_x_stopped;
 
+// Y channel
 wire apg_y_set_x;
 wire apg_y_set_v;
 wire apg_y_set_a;
@@ -279,12 +311,12 @@ wire apg_y_set_j;
 wire apg_y_set_jj;
 wire apg_y_set_target_v;
 
-assign apg_y_set_x = out_reg3[16];
-assign apg_y_set_v = out_reg3[17];
-assign apg_y_set_a = out_reg3[18];
-assign apg_y_set_j = out_reg3[19];
-assign apg_y_set_jj = out_reg3[20];
-assign apg_y_set_target_v = out_reg3[21];
+assign apg_y_set_x = out_reg3[14];
+assign apg_y_set_v = out_reg3[15];
+assign apg_y_set_a = out_reg3[16];
+assign apg_y_set_j = out_reg3[17];
+assign apg_y_set_jj = out_reg3[18];
+assign apg_y_set_target_v = out_reg3[19];
 
 wire signed [63:0] apg_y_x_val;
 wire signed [31:0] apg_y_v_val;
@@ -307,6 +339,78 @@ wire apg_y_step;
 wire apg_y_dir;
 wire apg_y_stopped;
 
+// Z channel
+wire apg_z_set_x;
+wire apg_z_set_v;
+wire apg_z_set_a;
+wire apg_z_set_j;
+wire apg_z_set_jj;
+wire apg_z_set_target_v;
+
+assign apg_z_set_x = out_reg3[20];
+assign apg_z_set_v = out_reg3[21];
+assign apg_z_set_a = out_reg3[22];
+assign apg_z_set_j = 0; // out_reg3[23];
+assign apg_z_set_jj = 0; //out_reg3[24];
+assign apg_z_set_target_v = out_reg3[25];
+
+wire signed [63:0] apg_z_x_val;
+wire signed [31:0] apg_z_v_val;
+wire signed [31:0] apg_z_a_val;
+wire signed [31:0] apg_z_j_val;
+wire signed [31:0] apg_z_jj_val;
+wire signed [31:0] apg_z_target_v_val;
+wire signed [31:0] apg_z_abort_a;
+
+assign apg_z_x_val[31:0] = out_reg24;
+assign apg_z_x_val[63:32] = out_reg25;
+assign apg_z_v_val = out_reg26;
+assign apg_z_a_val = out_reg27;
+assign apg_z_j_val = 0; // out_reg28;
+assign apg_z_jj_val = 0; //out_reg29;
+assign apg_z_target_v_val = out_reg30;
+assign apg_z_abort_a = out_reg31;
+
+wire apg_z_step;
+wire apg_z_dir;
+wire apg_z_stopped;
+
+// A channel
+wire apg_a_set_x;
+wire apg_a_set_v;
+wire apg_a_set_a;
+wire apg_a_set_j;
+wire apg_a_set_jj;
+wire apg_a_set_target_v;
+
+assign apg_a_set_x = out_reg3[26];
+assign apg_a_set_v = out_reg3[27];
+assign apg_a_set_a = out_reg3[28];
+assign apg_a_set_j = 0; // out_reg3[29];
+assign apg_a_set_jj = 0; //out_reg3[30];
+assign apg_a_set_target_v = out_reg3[31];
+
+wire signed [63:0] apg_a_x_val;
+wire signed [31:0] apg_a_v_val;
+wire signed [31:0] apg_a_a_val;
+wire signed [31:0] apg_a_j_val;
+wire signed [31:0] apg_a_jj_val;
+wire signed [31:0] apg_a_target_v_val;
+wire signed [31:0] apg_a_abort_a;
+
+assign apg_a_x_val[31:0] = out_reg32;
+assign apg_a_x_val[63:32] = out_reg33;
+assign apg_a_v_val = out_reg34;
+assign apg_a_a_val = out_reg35;
+assign apg_a_j_val = 0; // out_reg36;
+assign apg_a_jj_val = 0; // out_reg37;
+assign apg_a_target_v_val = out_reg38;
+assign apg_a_abort_a = out_reg39;
+
+wire apg_a_step;
+wire apg_a_dir;
+wire apg_a_stopped;
+
 s3g_rx s3g_rx(
     .clk(clk),
     .rst(n_rdy),
@@ -419,6 +523,26 @@ s3g_executor #(.INTS_TIMER(INTS_TIMER)) s3g_executor(
     .out_reg27(out_reg27),
     .out_reg28(out_reg28),
     .out_reg29(out_reg29),
+    .out_reg30(out_reg30),
+    .out_reg31(out_reg31),
+    .out_reg32(out_reg32),
+    .out_reg33(out_reg33),
+    .out_reg34(out_reg34),
+    .out_reg35(out_reg35),
+    .out_reg36(out_reg36),
+    .out_reg37(out_reg37),
+    .out_reg38(out_reg38),
+    .out_reg39(out_reg39),
+    .out_reg40(out_reg40),
+    .out_reg41(out_reg41),
+    .out_reg42(out_reg42),
+    .out_reg43(out_reg43),
+    .out_reg44(out_reg44),
+    .out_reg45(out_reg45),
+    .out_reg46(out_reg46),
+    .out_reg47(out_reg47),
+    .out_reg48(out_reg48),
+    .out_reg49(out_reg49),
 
     .out_reg62(be_start_addr),
     .out_reg63(se_reg_lb),
@@ -642,4 +766,94 @@ motor_step_gen msg_y(
            .missed()
 );
 
+acc_profile_gen apg_z(
+           .clk(clk),
+           .reset(n_rdy),
+           .acc_step(asg_step),
+           .load(asg_load),
+           .set_x(apg_z_set_x),
+           .set_v(apg_z_set_v),
+           .set_a(apg_z_set_a),
+           .set_j(apg_z_set_j),
+           .set_jj(apg_z_set_jj),
+           .set_target_v(apg_z_set_target_v),
+           .x_val(apg_z_x_val),
+           .v_val(apg_z_v_val),
+           .a_val(apg_z_a_val),
+           .j_val(apg_z_j_val),
+           .jj_val(apg_z_jj_val),
+           .target_v_val(apg_z_target_v_val),
+           .abort_a_val(apg_z_abort_a),
+           .step_bit(16),
+           .abort(asg_abort),
+           .x(),
+           .v(),
+           .a(),
+           .j(),
+           .jj(),
+           .step_start_x(),
+           .step_start_v(),
+           .step(apg_z_step),
+           .dir(apg_z_dir),
+           .stopped(apg_z_stopped)
+);
+
+motor_step_gen msg_z(
+           .clk(clk),
+           .reset(n_rdy),
+           .pre_n(msg_all_pre_n),
+           .pulse_n(msg_all_pulse_n),
+           .post_n(msg_all_post_n),
+           .step_stb(apg_z_step),
+           .step_dir(apg_z_dir),
+           .step(mot_z_step),
+           .dir(mot_z_dir),
+           .missed()
+);
+
+acc_profile_gen apg_a(
+           .clk(clk),
+           .reset(n_rdy),
+           .acc_step(asg_step),
+           .load(asg_load),
+           .set_x(apg_a_set_x),
+           .set_v(apg_a_set_v),
+           .set_a(apg_a_set_a),
+           .set_j(apg_a_set_j),
+           .set_jj(apg_a_set_jj),
+           .set_target_v(apg_a_set_target_v),
+           .x_val(apg_a_x_val),
+           .v_val(apg_a_v_val),
+           .a_val(apg_a_a_val),
+           .j_val(apg_a_j_val),
+           .jj_val(apg_a_jj_val),
+           .target_v_val(apg_a_target_v_val),
+           .abort_a_val(apg_a_abort_a),
+           .step_bit(16),
+           .abort(asg_abort),
+           .x(),
+           .v(),
+           .a(),
+           .j(),
+           .jj(),
+           .step_start_x(),
+           .step_start_v(),
+           .step(apg_a_step),
+           .dir(apg_a_dir),
+           .stopped(apg_a_stopped)
+);
+
+motor_step_gen msg_a(
+           .clk(clk),
+           .reset(n_rdy),
+           .pre_n(msg_all_pre_n),
+           .pulse_n(msg_all_pulse_n),
+           .post_n(msg_all_post_n),
+           .step_stb(apg_a_step),
+           .step_dir(apg_a_dir),
+           .step(mot_a_step),
+           .dir(mot_a_dir),
+           .missed()
+);
+
 endmodule
